@page
@model Assignment2.Pages.Admin.IndexModel
@{
    ViewData["Title"] = "Account Management";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-users me-2"></i>Account Management
                    </h4>
                    <button class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#createAccountModal">
                        <i class="fas fa-plus me-1"></i>Add New Account
                    </button>
                </div>
                <div class="card-body">
                    <!-- Account Table -->
                    <div class="table-responsive">
                        <table class="table table-hover table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Role</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="accountTableBody">
                                @foreach (var account in Model.Accounts)
                                {
                                    <tr id="row-@account.AccountId">
                                        <td>@account.AccountId</td>
                                        <td>@account.AccountName</td>
                                        <td>@account.AccountEmail</td>
                                        <td>
                                            @if (account.AccountRole == 2)
                                            {
                                                <span class="badge" style="background-color: #00C853;">Lecture</span>
                                            }
                                            else if (account.AccountRole == 1)
                                            {
                                                <span class="badge" style="background-color: #F06292;">Staff</span>
                                            }
                                            else if (account.AccountRole == 3)
                                            {
                                                <span class="badge bg-primary">Admin</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-warning" onclick="editAccount(@account.AccountId, '@account.AccountName', '@account.AccountEmail', @account.AccountRole)" title="Edit Account">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                <button class="btn btn-danger" onclick="confirmDelete(@account.AccountId, '@account.AccountName')" title="Delete Account">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Account Modal -->
<div class="modal fade" id="createAccountModal" tabindex="-1" aria-labelledby="createAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="createAccountModalLabel">
                    <i class="fas fa-user-plus me-2"></i>Create New Account
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createAccountForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="createAccountName" class="form-label">Account Name</label>
                        <input type="text" class="form-control" id="createAccountName" name="AccountName" required>
                    </div>
                    <div class="mb-3">
                        <label for="createAccountEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="createAccountEmail" name="AccountEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="createAccountPassword" class="form-label">Password</label>
                        <input type="password" class="form-control" id="createAccountPassword" name="Password" required>
                    </div>
                    <div class="mb-3">
                        <label for="createAccountRole" class="form-label">Role</label>
                        <select class="form-select" id="createAccountRole" name="AccountRole" required>
                            <option value="2">Lecture</option>
                            <option value="1">Staff</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-1"></i>Create Account
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Account Modal -->
<div class="modal fade" id="editAccountModal" tabindex="-1" aria-labelledby="editAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="editAccountModalLabel">
                    <i class="fas fa-user-edit me-2"></i>Edit Account
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editAccountForm">
                <div class="modal-body">
                    <input type="hidden" id="editAccountId" name="AccountId">
                    <div class="mb-3">
                        <label for="editAccountName" class="form-label">Account Name</label>
                        <input type="text" class="form-control" id="editAccountName" name="AccountName">
                    </div>
                    <div class="mb-3">
                        <label for="editAccountEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editAccountEmail" name="AccountEmail">
                    </div>
                    <div class="mb-3">
                        <label for="editAccountPassword" class="form-label">Password (leave blank to keep current)</label>
                        <input type="password" class="form-control" id="editAccountPassword" name="Password">
                    </div>
                    <div class="mb-3">
                        <label for="editAccountRole" class="form-label">Role</label>
                        <select class="form-select" id="editAccountRole" name="AccountRole">
                            <option value="1">Staff</option>
                            <option value="2">Lecture</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-save me-1"></i>Update Account
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Are you sure you want to delete this account?</p>
                <div class="alert alert-warning">
                    <strong>Account:</strong> <span id="deleteAccountName"></span>
                </div>
                <p class="text-danger">
                    <i class="fas fa-exclamation-circle me-1"></i>
                    This action cannot be undone!
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash me-1"></i>Delete Account
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Loading Spinner -->
<div class="modal fade" id="loadingModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 mb-0">Processing...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let deleteAccountId = null;

        // Create Account
        document.getElementById('createAccountForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const data = {
                AccountName: formData.get('AccountName'),
                AccountEmail: formData.get('AccountEmail'),
                Password: formData.get('Password'),
                AccountRole: parseInt(formData.get('AccountRole'))
            };

            try {
                
                const response = await fetch('/Admin?handler=Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                });

                

                if (response.ok) {
                    showAlert('Account created successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('createAccountModal')).hide();
                    this.reset();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    const error = await response.text();
                    showAlert('Error creating account: ' + error, 'danger');
                }
            } catch (error) {
              
                showAlert('Error creating account: ' + error.message, 'danger');
            }
        });

        // Edit Account
        function editAccount(id, name, email, role) {
            document.getElementById('editAccountId').value = id;
            document.getElementById('editAccountName').value = name;
            document.getElementById('editAccountEmail').value = email;
            document.getElementById('editAccountRole').value = role;

            const modal = new bootstrap.Modal(document.getElementById('editAccountModal'));
            modal.show();
        }

        document.getElementById('editAccountForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const data = {
                AccountId: parseInt(formData.get('AccountId')),
                AccountName: formData.get('AccountName') || null,
                AccountEmail: formData.get('AccountEmail') || null,
                Password: formData.get('Password') || null,
                AccountRole: parseInt(formData.get('AccountRole'))
            };

            try {
                
                const response = await fetch('/Admin?handler=Update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                });

                

                if (response.ok) {
                    showAlert('Account updated successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editAccountModal')).hide();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    const error = await response.text();
                    showAlert('Error updating account: ' + error, 'danger');
                }
            } catch (error) {
                
                showAlert('Error updating account: ' + error.message, 'danger');
            }
        });

        // Delete Account
        function confirmDelete(id, name) {
            deleteAccountId = id;
            document.getElementById('deleteAccountName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();
        }

        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
            if (!deleteAccountId) return;

            try {
                bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                

                const response = await fetch(`/Admin?handler=Delete&id=${deleteAccountId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

               

                if (response.ok) {
                    showAlert('Account deleted successfully!', 'success');

                    // Remove row from table
                    const row = document.getElementById(`row-${deleteAccountId}`);
                    if (row) {
                        row.remove();
                    }

                    deleteAccountId = null;
                } else {
                    const error = await response.text();
                    showAlert('Error deleting account: ' + error, 'danger');
                }
            } catch (error) {
                
                showAlert('Error deleting account: ' + error.message, 'danger');
            }
        });

        // Utility functions
        

        

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            document.body.appendChild(alertDiv);

            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }

        // Clear modals when hidden
        document.getElementById('createAccountModal').addEventListener('hidden.bs.modal', function() {
            document.getElementById('createAccountForm').reset();
        });

        document.getElementById('editAccountModal').addEventListener('hidden.bs.modal', function() {
            document.getElementById('editAccountForm').reset();
        });
    </script>
}