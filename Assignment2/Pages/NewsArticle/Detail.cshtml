@page
@model Assignment2.Pages.NewsArticle.DetailModel
@{
    ViewData["Title"] = Model.NewsArticle?.NewsTitle ?? "News Article";
}

<div class="container mt-4">
    <!-- Back Button -->
    <div class="mb-4">
        <a asp-page="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to News Articles
        </a>
    </div>

    @if (Model.NewsArticle != null)
    {
        <!-- News Article Content -->
        <article class="news-article">
            <!-- Article Header -->
            <header class="article-header mb-4">
                <!-- Category Badge -->
                @if (!string.IsNullOrEmpty(Model.NewsArticle.CategoryName))
                {
                    <div class="mb-3">
                        <span class="badge bg-primary fs-6 px-3 py-2">@Model.NewsArticle.CategoryName</span>
                    </div>
                }

                <!-- Article Title -->
                <h1 class="article-title display-4 fw-bold mb-3">@Model.NewsArticle.NewsTitle</h1>

                <!-- Headline/Subtitle -->
                @if (!string.IsNullOrEmpty(Model.NewsArticle.Headline) && Model.NewsArticle.Headline != Model.NewsArticle.NewsTitle)
                {
                    <h2 class="article-headline text-muted fs-3 fw-normal mb-4">@Model.NewsArticle.Headline</h2>
                }

                <!-- Article Meta Information -->
                <div class="article-meta d-flex flex-wrap align-items-center text-muted mb-4">
                    <!-- Publication Date -->
                    <div class="me-4 mb-2">
                        <i class="bi bi-calendar3"></i>
                        <span class="ms-1">@Model.NewsArticle.CreatedDate?.ToString("MMMM dd, yyyy")</span>
                    </div>

                    <!-- Author -->
                    @if (!string.IsNullOrEmpty(Model.NewsArticle.CreatedByName))
                    {
                        <div class="me-4 mb-2">
                            <i class="bi bi-person"></i>
                            <span class="ms-1">By @Model.NewsArticle.CreatedByName</span>
                        </div>
                    }

                    <!-- News Source -->
                    @if (!string.IsNullOrEmpty(Model.NewsArticle.NewsSource))
                    {
                        <div class="me-4 mb-2">
                            <i class="bi bi-globe"></i>
                            <span class="ms-1">@Model.NewsArticle.NewsSource</span>
                        </div>
                    }

                    <!-- Last Updated -->
                    @if (Model.NewsArticle.ModifiedDate.HasValue && Model.NewsArticle.ModifiedDate != Model.NewsArticle.CreatedDate)
                    {
                        <div class="me-4 mb-2">
                            <i class="bi bi-clock-history"></i>
                            <span class="ms-1">Updated @Model.NewsArticle.ModifiedDate?.ToString("MMMM dd, yyyy")</span>
                        </div>
                    }

                    <!-- Status -->
                    <div class="mb-2">
                        @if (Model.NewsArticle.NewsStatus == true)
                        {
                            <span class="badge bg-success">
                                <i class="bi bi-check-circle"></i> Published
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">
                                <i class="bi bi-pause-circle"></i> Draft
                            </span>
                        }
                    </div>
                </div>

                <!-- Divider -->
                <hr class="article-divider">
            </header>

            <!-- Article Body -->
            <div class="article-body">
                @if (!string.IsNullOrEmpty(Model.NewsArticle.NewsContent))
                {
                    <div class="article-content fs-5 lh-lg">
                        @Html.Raw(Model.NewsArticle.NewsContent.Replace("\n", "<br>"))
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> No content available for this article.
                    </div>
                }
            </div>

            <!-- Article Footer -->
            <footer class="article-footer mt-5">
                <!-- Tags -->
                @if (Model.NewsArticle.TagNames != null && Model.NewsArticle.TagNames.Any())
                {
                    <div class="article-tags mb-4">
                        <h6 class="text-muted mb-3">
                            <i class="bi bi-tags"></i> Tags:
                        </h6>
                        <div class="d-flex flex-wrap">
                            @foreach (var tagName in Model.NewsArticle.TagNames)
                            {
                                <span class="badge bg-secondary me-2 mb-2 fs-6 px-3 py-2">#@tagName</span>
                            }
                        </div>
                    </div>
                }

                <!-- Updated By Information -->
                @if (!string.IsNullOrEmpty(Model.NewsArticle.UpdatedByName))
                {
                    <div class="updated-info text-muted">
                        <small>
                            <i class="bi bi-pencil"></i>
                            Last updated by @Model.NewsArticle.UpdatedByName
                            @if (Model.NewsArticle.ModifiedDate.HasValue)
                            {
                                <span>on @Model.NewsArticle.ModifiedDate?.ToString("MMMM dd, yyyy 'at' HH:mm")</span>
                            }
                        </small>
                    </div>
                }

                <!-- Divider -->
                <hr class="mt-4">

                <!-- Action Buttons -->
                <div class="article-actions d-flex justify-content-between align-items-center mt-4">
                    <div>
                        <a asp-page="Index" class="btn btn-outline-primary">
                            <i class="bi bi-list"></i> All Articles
                        </a>
                    </div>

                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-success" onclick="window.print()">
                            <i class="bi bi-printer"></i> Print
                        </button>
                        <button type="button" class="btn btn-outline-info" onclick="shareArticle()">
                            <i class="bi bi-share"></i> Share
                        </button>
                    </div>
                </div>
            </footer>
        </article>
    }
    else
    {
        <!-- Error State -->
        <div class="alert alert-warning text-center">
            <i class="bi bi-exclamation-triangle fs-1 mb-3"></i>
            <h4>Article Not Found</h4>
            <p>The requested news article could not be found or may have been removed.</p>
            <a asp-page="Index" class="btn btn-primary">
                <i class="bi bi-arrow-left"></i> Back to News Articles
            </a>
        </div>
    }
</div>

<style>
    .news-article {
        max-width: 800px;
        margin: 0 auto;
        font-family: 'Georgia', 'Times New Roman', serif;
    }

    .article-title {
        font-family: 'Georgia', 'Times New Roman', serif;
        line-height: 1.2;
        margin-bottom: 1rem;
        color: #1a1a1a;
    }

    .article-headline {
        font-style: italic;
        line-height: 1.3;
        border-left: 4px solid #007bff;
        padding-left: 1rem;
    }

    .article-meta {
        font-size: 0.95rem;
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 1rem;
    }

        .article-meta i {
            color: #6c757d;
            width: 16px;
        }

    .article-divider {
        border: none;
        height: 2px;
        background: linear-gradient(to right, #007bff, transparent);
        margin: 2rem 0;
    }

    .article-content {
        text-align: justify;
        color: #2c2c2c;
        line-height: 1.8;
        margin-bottom: 2rem;
    }

        .article-content p {
            margin-bottom: 1.5rem;
        }

    .article-tags .badge {
        font-weight: normal;
        text-decoration: none;
        transition: all 0.2s ease;
    }

        .article-tags .badge:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

    .article-footer {
        border-top: 1px solid #e9ecef;
        padding-top: 2rem;
    }

    .updated-info {
        font-size: 0.85rem;
        font-style: italic;
    }

    /* Print Styles */
    @@media print {
        .btn, .article-actions, nav, .container > .mb-4:first-child {
            display: none !important;
        }

        .article-title {
            font-size: 2rem !important;
        }

        .article-content {
            font-size: 12pt !important;
            line-height: 1.6 !important;
        }

        .badge {
            border: 1px solid #000;
            color: #000 !important;
            background: transparent !important;
        }

        .article-meta {
            border-bottom: 2px solid #000;
        }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .article-title {
            font-size: 2rem;
        }

        .article-headline {
            font-size: 1.25rem;
        }

        .article-meta {
            font-size: 0.9rem;
        }

        .article-content {
            font-size: 1.1rem;
        }

        .article-actions {
            flex-direction: column;
            gap: 1rem;
        }

            .article-actions > div {
                width: 100%;
                text-align: center;
            }

        .btn-group {
            width: 100%;
        }

            .btn-group .btn {
                flex: 1;
            }
    }
</style>

<script>
    function shareArticle() {
        if (navigator.share) {
            navigator.share({
                title: '@Model.NewsArticle?.NewsTitle',
                text: '@Model.NewsArticle?.Headline',
                url: window.location.href
            }).catch(console.error);
        } else {
            // Fallback: copy URL to clipboard
            navigator.clipboard.writeText(window.location.href).then(function () {
                alert('Article URL copied to clipboard!');
            }).catch(function () {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = window.location.href;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('Article URL copied to clipboard!');
            });
        }
    }

    // Add smooth scrolling for any anchor links
    document.addEventListener('DOMContentLoaded', function () {
        // Add reading time estimation
        const content = document.querySelector('.article-content');
        if (content) {
            const text = content.textContent || content.innerText || '';
            const wordsPerMinute = 200;
            const words = text.trim().split(/\s+/).length;
            const readingTime = Math.ceil(words / wordsPerMinute);

            if (readingTime > 0) {
                const readingTimeElement = document.createElement('div');
                readingTimeElement.className = 'reading-time text-muted mb-2';
                readingTimeElement.innerHTML = `<i class="bi bi-clock"></i> <span class="ms-1">${readingTime} min read</span>`;

                const metaElement = document.querySelector('.article-meta');
                if (metaElement) {
                    metaElement.appendChild(readingTimeElement);
                }
            }
        }
    });
</script>